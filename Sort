排序算法问题描述：给定一个含有元素的数组array和数组元素个数N，使该数组元素有序排列。

1.插入排序（Insertsort）

（1）算法思想:N-1趟遍历，每趟排序使0-i个元素有序（双重循环）【将第i个元素插入到前i-1个有序元素中的合适位置】
（2）算法实现：
                void InsertSort(int array[], int N)
                {
                    int i, j, temp;

                    for(i = 1; i < N; i++){
                        temp = array[i];
                        for(j = i; j > 0 && array[j - 1] > temp; j-- ){
                            array[j] = array[j - 1];
                        }
                    array[j] = temp;
                    }
                    return;
                }
实现注意事项：没有用到swap方法，反而是用一个临时变量将当前元素保存并后移数组元素，直到找到合适位置。
（3）算法复杂度：O(N^2)
（4）算法特点:最坏情况下（逆序输入）时间复杂度为O（N^2），最好情况下（已经排好序）时间复杂度O(N)，分析平均情形的行为，实际也是O（N^2）。

2.希尔排序（Shellsort）




3.归并排序（Mergesort）
（1）基本思想：将数据分成两部分，递归的将前半部分与后半部分分别进行归并排序，然后合并两个已排序的部分 =》 归并（分治策略）
（2）算法实现（递归方法）：MSort（递归调用） + Merge + Mergesort（调用MSort）
                #include <stdio.h>
                #include <stdlib.h>

                //合并两个已排序表的具体实现
                void Merge(int A[], int TmpArray[], int Lpos, int Rpos, int RightEnd)
                {
                    int LeftEnd, TmpPos, i, count;

                    LeftEnd = Rpos - 1;
                    TmpPos = Lpos;//使数组A和临时数组对齐
                    count = RightEnd - Lpos + 1;

                    while(Lpos <= LeftEnd && Rpos <= RightEnd)
                    {
                        if(A[Lpos] <= A[Rpos])
                            TmpArray[TmpPos++] = A[Lpos++];
                        else
                            TmpArray[TmpPos++] = A[Rpos++];
                    }

                    while(Lpos <= LeftEnd)
                        TmpArray[TmpPos++] = A[Lpos++];

                    while(Rpos <= RightEnd)
                        TmpArray[TmpPos++] = A[Rpos++];

                    //逆向将排好序的数据拷回A数组
                    for(i = 0; i < count; i++, RightEnd--)
                        A[RightEnd] = TmpArray[RightEnd];
                }

                //递归调用主体（分治策略）
                void MSort(int A[], int TmpArray[], int left, int right)
                {
                    int mid;
                    if(left < right)
                    {
                        mid = (left + right) / 2;
                        MSort(A, TmpArray, left, mid);
                        MSort(A, TmpArray, mid + 1, right);
                        Merge(A, TmpArray, left, mid + 1, right);
                    }
                }

                //算法入口
                void Mergesort(int A[], int N)
                {
                    int *TmpArray;
                    TmpArray = malloc(N * sizeof(int));

                    if(TmpArray != NULL)
                    {
                        MSort(A, TmpArray, 0, N - 1);
                        free(TmpArray);
                    }
                    else
                    {
                        printf("TmpArray 申请失败.\n");
                    }

                }

                //测试主体
                int main()
                {
                    int i, N = 0;
                    int A[10] = {20, 19, 18, 17, 16, 15, 13, 12, 11, 14};
                    N = 10;
                    Mergesort(A, 10);

                    for(i = 0; i < N; i++)
                    {
                        printf("%d ", A[i]);
                    }
                    printf("\n");
                    return 0;
                }
（3）算法分析：时间复杂度O(N*logN),但是不经常被用于内部排序，主要是因为合并两个已排序的表需要线性附加内存开销，并且会拷回来再考回去附加时间开销。
（主要问题：内存开销大），但 是外部排序的基础。

4.快速排序（Quicksort）（内部排序最常用方法：分治策略）
（1）算法思路：按照一定策略（三数中值法）选取一个枢纽元pivot，然后将其移到数组最后，大于枢纽元的元素放到数组右边，小于枢纽元的放在左边，然后依次递归进行快速排序。
（2）算法实现：
【1】选取枢纽元（三数中值分割法）
              //选取枢纽元---三数中值分割法
              int media3(int A[], int left, int right)
              {
                  int mid = (left + right) / 2;

                  if(A[left] > A[mid])
                      Swap(&A[left], &A[mid]);
                  if(A[left] > A[right])
                      Swap(&A[left], &A[right]);
                  if(A[mid] > A[right])
                      Swap(&A[mid], &A[right]);

                  Swap(&A[mid], &A[right - 1]);//将中值放到倒数第二位置上
                  return A[right - 1];
              }//算法结束后，数组布局为|三数最小值|...|三数中值|三数最大值|

【2】分割与递归调用
                //分割并递归调用
                void QSort(int A[], int left, int right)//left right充当界
                {
                    int i, j;
                    int pivot;

                    if(left + 3 <= right)//三数中值法的递归边界
                    {
                        pivot = media3(A, left, right);
                        i = left; j = right - 1;

                        //快排快的地方
                        while(1)
                        {
                            while(A[++i] < pivot) {}
                            while(A[--j] > pivot) {}

                            if(i < j)
                                Swap(&A[i], &A[j]);
                            else
                                break;
                        }

                        Swap(&A[i], &A[right - 1]);//将中值换到正确位置

                        QSort(A, left, i - 1);
                        QSort(A, i + 1, right);
                    }
                    else
                        InsertSort(A + left, right - left + 1);
                }

                //算法入口
                void Quicksort(int A[], int N)
                {
                    QSort(A, 0, N - 1);
                }
（3）算法分析:时间复杂度O(N * log N)







